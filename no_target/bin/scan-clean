#!/usr/bin/env python3

"""
scan-clean - Cleans up scans by dividing a blurred image by the original

Inspired by
 - Noteshrink, which is great but not for camera-based scans
 - keenerd on HN: https://news.ycombinator.com/item?id=16568383
Future work in
 - this thread by kazinator https://news.ycombinator.com/item?id=16568728
"""


import sys
from PIL import Image, ImageFilter
from subprocess import run
from pathlib import Path
import tempfile
import numpy as np


def eprint(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)


def load(input_filename):
    pil_img = Image.open(input_filename)
    if pil_img.mode != "RGB":
        pil_img = pil_img.convert("RGB")
    if "dpi" in pil_img.info:
        dpi = pil_img.info["dpi"]
    else:
        dpi = (300, 300)
    # img = np.array(pil_img)
    # return img, dpi
    return pil_img, dpi


def post_process_in_place(img_path):
    cmd = [
        "pngquant",
        "--ext",
        ".png",
        "--force",
        "--speed",
        "3",
        "--posterize",
        "4",
        "--quality",
        "4-10",
        "--",
    ]
    cmd.append(img_path)
    eprint(" ".join([str(c) for c in cmd]))
    run(cmd)


def process_image(input_path, output_path):
    img, dpi = load(input_path)
    kernel_radius = (dpi[0] + dpi[1]) / 2 / 8
    # print(kernel_radius)
    img_blurred = img.filter(ImageFilter.GaussianBlur(radius=kernel_radius))
    img_raw_np = np.array(img)
    img_blur_np = np.array(img_blurred)
    # print(img_blur_np.dtype)
    img_processed = (img_raw_np.astype(np.int32) * 256) / (
        img_blur_np.astype(np.int32) + 1
    )
    np.clip(img_processed, 0.0, 255.0, out=img_processed)
    img_processed = img_processed.astype(np.uint8, copy=False)
    save(img_processed, dpi, output_path)


def save(img_np, dpi, output_filename):
    output_img = Image.fromarray(img_np, "RGB")
    output_img.save(output_filename, dpi=dpi)


def emit_pdf(outputs, pdf_path):
    cmd = ["convert"]
    cmd += outputs
    cmd.append(pdf_path)

    eprint("Running PDF command")
    eprint(" ".join([str(c) for c in cmd]))
    run(cmd)


def pdf_to_images(input_path, dirpath):
    cmd = ["pdfimages", "-all", input_path, str(dirpath) + "/"]
    eprint(" ".join([str(c) for c in cmd]))
    run(cmd)
    return list(dirpath.glob("*"))


def main(args):
    import time

    input_file = args[1]
    output_file = args[2]
    with tempfile.TemporaryDirectory() as tmpdir:
        eprint("Using temp dir", tmpdir)
        dirpath = Path(tmpdir)
        eprint("Extracing images from pdf...")
        img_paths = pdf_to_images(input_file, dirpath)
        eprint("Extracted images", ", ".join([str(p) for p in img_paths]))
        eprint("Processing...")
        output_images = []
        for img_path in sorted(img_paths):
            output_path = img_path.parent / ("processed_" + img_path.name)
            eprint("Processing", str(img_path))
            process_image(img_path, output_path)
            post_process_in_place(output_path)
            output_images.append(output_path)
        print(output_images)
        emit_pdf(output_images, output_file)


if __name__ == "__main__":
    main(sys.argv)
